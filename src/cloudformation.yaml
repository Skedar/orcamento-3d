AWSTemplateFormatVersion: '2010-09-09'
Description: 'Template para criar função Lambda com API Gateway para upload de arquivos'

Resources:
  UploadFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'orcamento-3d-upload'
      Handler: 'index.handler'
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              const headers = {
                  'Access-Control-Allow-Origin': '*',
                  'Access-Control-Allow-Headers': 'Content-Type',
                  'Access-Control-Allow-Methods': 'OPTIONS,POST',
                  'Content-Type': 'application/json'
              };
              
              // Resposta para preflight
              if (event.httpMethod === 'OPTIONS') {
                  return {
                      statusCode: 200,
                      headers,
                      body: ''
                  };
              }

              try {
                  const body = JSON.parse(event.body);
                  const { fileName, fileType } = body;
                  const fileId = `${Date.now()}-${fileName}`;
                  
                  return {
                      statusCode: 200,
                      headers,
                      body: JSON.stringify({
                          success: true,
                          fileId: fileId,
                          message: 'Arquivo processado com sucesso'
                      })
                  };
              } catch (error) {
                  return {
                      statusCode: 500,
                      headers,
                      body: JSON.stringify({
                          error: 'Erro ao processar arquivo'
                      })
                  };
              }
          }
      Runtime: 'nodejs20.x'
      Timeout: 30
      MemorySize: 128

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  ApiGateway:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: 'orcamento-3d-api'
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'orcamento-3d-upload'
      RestApiId: !Ref ApiGateway

  ApiMethodOptions:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref ApiResource
      RestApiId: !Ref ApiGateway
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  ApiMethodPost:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: POST
      ResourceId: !Ref ApiResource
      RestApiId: !Ref ApiGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadFunction.Arn}/invocations'

  ApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn: 
      - ApiMethodOptions
      - ApiMethodPost
    Properties:
      RestApiId: !Ref ApiGateway

  ApiStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref ApiGateway
      StageName: 'default'

  LambdaApiPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt UploadFunction.Arn
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*'

Outputs:
  ApiUrl:
    Description: 'URL da API'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/default/orcamento-3d-upload'